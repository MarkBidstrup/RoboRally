@startuml
'https://plantuml.com/sequence-diagram

package Client <<Rectangle>>{
    package fileaccess {
        class GameStateClient {
            httpClient

            getGameStateTemplate()
            updateGameStateTemplate()
            getProgrammingCounter()
            incrementProgrammingCounter()
            setProgrammingCounter()
            updatePlayerMat()
        }

        class OnlineGameClient {
            httpClient

            createGame()
            getNumberOfJoinedPlayers()
            getMaxNumberOfPlayers()
            getOnlineGames()
            joinOnlineGame()
            getOnlineGame()
        }

        class SavedGamesClient {
            httpClient

            getListOfSavedGames()
            getGameStateTemplate()
            addGameStateTemplate()
            updateGameStateTemplate()
            deleteGameStateTemplate()
            getAvailablePlayers()
            joinLoadedGame()
            allPlayersJoined()
            leaveJoinedGame()
            addActiveGame()
            getActiveGames()
        }

        interface IGameState {
            getGameStateTemplate()
            updateGameStateTemplate()
            getProgrammingCounter()
            incrementProgrammingCounter()
            setProgrammingCounter()
            updatePlayerMat()
        }

        interface IGamesService {
            getGameStateTemplate()
            addGameStateTemplate()
            updateGameStateTemplate()
            deleteGameStateTemplate()
            getAvailablePlayers()
            joinLoadedGame()
            allPlayersJoined()
            leaveJoinedGame()
            addActiveGame()
            getActiveGames()
        }

        interface IOnlineGameClient {
            createGame()
            getNumberOfJoinedPlayers()
            getMaxNumberOfPlayers()
            getOnlineGames()
            joinOnlineGame()
            getOnlineGame()
        }
    }
}

package Server <<Rectangle>>{
    package RoboRallyServer {
        class GameStateController {
            gamesService

            getGameStateTemplate()
            addGameStateTemplate()
            updateGameStateTemplate()
            getProgrammingCounter()
            setProgrammingCounter()
            incrementProgrammingCounter()
            updatePlayerMat()
        }

        class GameStateService {
            currentGames
            programmingCounter

            getGameStateTemplate()
            updateGameStateTemplate()
            getProgrammingCounter()
            incrementProgrammingCounter()
            setProgrammingCounter()
            addNewProgrammingCounter()
            updatePlayerMat()
        }

        class OnlineGameController {
            services

            createGame()
            getNumberOfJoinedPlayers()
            joinOnlineGame()
            getMaxNumberOfPlayers()
            getOnlineGame()
            getOnlineGames()
        }

        class OnlineGameServices {
            onlineGames

            createGame()
            getNumberOfJoinedPlayers()
            getMaxNumberOfPlayers()
            getOnlineGames()
            getOnlineGame()
            joinOnlineGame()
        }

        class RoboRallyServerApplication {
            main()
        }

        class SavedGamesController {
            gamesService

            getListOfGames()
            getGameStateTemplate()
            addGameStateTemplate()
            updateGameStateTemplate()
            deleteGame()
            leaveJoinedGame()
            getAvailablePlayers()
            joinLoadedGame()
            allPlayersJoined()
            getActiveGames()
            addActiveGame()
        }

        class SavedGamesService {
            savedGames
            activeGames
            playersJoined

            findAll()
            getGameStateTemplate()
            addGameStateTemplate()
            updateGameStateTemplate()
            deleteGameStateTemplate()
            getAvailablePlayers()
            joinLoadedGame()
            allPlayersJoined()
            leaveJoinedGame()
            addActiveGame()
            getActiveGames()
            loadGame()
        }

        interface "IGameState" as ServerIGameState
        interface "ISavedGamesService" as ServerISavedGamesService

        interface ServerISavedGamesService {
            findAll

            getGameStateTemplate()
            addGameStateTemplate()
            updateGameStateTemplate()
            deleteGameStateTemplate()
            getAvailablePlayers()
            joinLoadedGame()
            allPlayersJoined()
            leaveJoinedGame()
            addActiveGame()
            getActiveGames()
        }

        interface ServerIGameState {
            getGameStateTemplate()
            updateGameStateTemplate()
            getProgrammingCounter()
            incrementProgrammingCounter()
            setProgrammingCounter()
            addNewProgrammingCounter()
            updatePlayerMat()
        }

        interface IOnlineGameServices {
            createGame()
            getNumberOfJoinedPlayers()
            getMaxNumberOfPlayers()
            getOnlineGame()
            getOnlineGames()
            joinOnlineGame()
        }
    }
}

/' Client connections '/
GameStateClient ..|> IGameState
OnlineGameClient ..|> IOnlineGameClient
SavedGamesClient ..|> IGamesService

/' Server connections '/
GameStateService ..|> ServerIGameState
OnlineGameServices ..|> IOnlineGameServices
SavedGamesService ..|> ServerISavedGamesService
GameStateController -- ServerIGameState
SavedGamesController -- ServerISavedGamesService
OnlineGameController -- IOnlineGameServices

/' General connections '/
Client -- Server

@enduml